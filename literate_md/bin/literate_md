#!/usr/bin/ruby -rubygems

require 'coderay'
require 'redcarpet'
require 'trollop'
require 'fileutils'

opts = $opts || Trollop::options do
  opt :weave, "Produce documentation", :short => 'w'
  opt :tangle, "Produce code", :short => 't'
  opt :outputdir, "Directory to write files to", :default => Dir.pwd, :short => 'o'
  opt :lang, "Default language of code", :default => "ruby", :short => 'l'
  opt :files, "Files to process", :type => :string, :short => 'f', :required => true
  opt :standalone, "Weaves in html and body tags", :default => false, :short => 's'
end

$allowed = '(\w| )*|((.*:)?\*)'
html_opts = {
  :fenced_code_blocks => true, 
  :superscript => true, 
  :tables => true, 
  :lax_html_blocks => true, 
  :strikethrough => true
}
$ext_for_lang = {
  :ruby => 'rb',
  :c => 'c',
}

class Weave < Redcarpet::Render::XHTML
  attr_accessor :default_lang, :original_text, :standalone
  def block_code(code, lang)
  	l_ang, r_ang, equiv = "__lang__", "__rang__", "__equiv__"
  	line_num = @original_text[0,@original_text.index(code)].count("\n")+1
    code = code.
      gsub(/@(#{$allowed})@\s*\+=/,"#{l_ang}\\1#{r_ang}+#{equiv}").
      gsub(/@(#{$allowed})@/,"#{l_ang}\\1#{r_ang}")
    code = CodeRay.
      scan(code, lang.nil? ? @default_lang : lang.to_sym).
      html(
        :wrap => :div, 
        :css => :style, 
        :line_numbers => :table,
        :line_number_start => line_num)
    code.
      gsub(/#{l_ang}/,'&lang;').
      gsub(/#{r_ang}/,'&rang;').
      gsub(/#{equiv}/,'&equiv;')
  end  
  def codespan(code); block_code(code,nil) end
  def doc_header; "<html><body>" if @standalone end
  def doc_footer; "</body></html>" if @standalone end
end

def write_to path, data
	FileUtils.mkdir_p(File.dirname(path))
	File.open(path, 'w') {|f| f.write(data)}
end

if opts.weave
  r = Redcarpet::Markdown.new(Weave, html_opts)
  r.renderer.default_lang = opts.lang.to_sym
  r.renderer.standalone = opts.standalone
  opts.files.split(',').each{|file|
    code = File.open(file, 'r'){|f|f.read}
    r.renderer.original_text = code
	html = r.render(code)
	write_to("#{opts.outputdir}/#{File.basename(file)}.html", html)
  }
end

class Tangle < Redcarpet::Render::Base
  attr_accessor :default_lang, :links, :file_no_ext
  def block_code(code, lang)
    last_find = 0
    chunks = 
      [{:start => last_find, :anchor => '*', :anchor_len => 0}] + 
      code.scan(/(@(#{$allowed})@\s*\+=)/).map{|x|
        {:start => last_find = code.index(x[0], last_find), :anchor => x[1], :anchor_len => x[0].length}
      } +
      [{:start => code.length, :anchor_len => 0}]
    (1..chunks.length-1).each{|index|
      last, this = chunks[index-1], chunks[index]
      new_snippet = code[
        last[:start] + last[:anchor_len], # start index
        this[:start] - (last[:start] + last[:anchor_len]) # length of substr
      ]
      @links[normalise(last[:anchor],lang)] << new_snippet if not new_snippet.strip.empty?
    }
    nil
  end
  def normalise(link_name, lang)
    if link_name == '*'
      "#{@file_no_ext}.#{$ext_for_lang[lang.nil? ? @default_lang : lang.to_sym]}:*"
    else
      link_name
    end
  end
  def codespan(code); block_code(code,nil) end
end

if opts.tangle
  links = Hash.new{|h,k|h[k]=[]}
  r = Redcarpet::Markdown.new(Tangle, html_opts)
  r.renderer.default_lang, r.renderer.links = opts.lang.to_sym, links
  opts.files.split(',').each{|file|
    r.renderer.file_no_ext = file[0,file.rindex('.')]
	r.render(File.open(file, 'r'){|f|f.read})
  }
  resolve = lambda{|parts| parts.join('').gsub(/@(#{$allowed})@/) {|match|resolve.call(links[match[1..-2]])} }
  links.keys.reject{|k|!k.end_with? ':*'}.each{|root|
	write_to(
	  "#{opts.outputdir}/#{root[0..-3]}", 
	  resolve.call(links[root]))
  }
end
 